syntax = "proto3";

// IBeam-Core protocol version 0.1.0

package ibeam_core;
option go_package = ".;ibeam_core";

service IbeamCore {
  /* Return the Core and it's Infos that inclues:
   * - Ibeam Version Numbe
   * - Core Version Number
   * - Product Name
   * - Max Devices
   * - Connected Clients
   */
  rpc GetCoreInfo(Empty) returns(CoreInfo);

  // No id -> get everything
  rpc GetDeviceInfo(DeviceIDs) returns(DeviceInfos);
  rpc GetModelInfo(ModelIDs) returns(ModelInfos);

  //---------------------

  // No id -> get everything, as ParamID has 2 dimensions this rule should work
  // in both
  rpc Get(DeviceParameterIDs) returns(Parameters);
  rpc GetParameterDetails(ModelParameterIDs) returns(ParameterDetails);

  rpc Set(Parameters) returns(Empty); // on error: return via stream

  // No id -> subscribe to everything
  // On subscribe all current values should be sent back!
  rpc Subscribe(DeviceParameterIDs) returns(stream Parameter);
}

message Empty {}

/* * * * * * * * * * * * * *
        CORE
 * * * * * * * * * * * * * */

message CoreInfo {
  string ibeamVersion = 1; // Implemented version of the IBeam Protocol (better
  // String than int for Versions like 1.0.2b)
  string coreVersion = 2; // Implemented version of the IBeam Core
  // In unisketch this should be a hard break that requires updating!
  string description = 3;
  string name = 4;
  uint32 maxDevices = 5;
  uint32 connectedClients = 6;
}

/* * * * * * * * * * * * * *
        DEVICE
 * * * * * * * * * * * * * */

message DeviceIDs { repeated uint32 ids = 1; }

// Deviceinfo is kept simple, connection status and device config is handeled
// via parameters
message DeviceInfo {
  uint32 deviceID = 1;
  uint32 modelID = 2;
}
message DeviceInfos { repeated DeviceInfo deviceInfos = 1; }

/* * * * * * * * * * * * * *
        MODEL
 * * * * * * * * * * * * * */

message ModelIDs { repeated uint32 ids = 1; }

message ModelInfo {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  ConnectionType connectionType = 4;
}
message ModelInfos { repeated ModelInfo modelInfos = 1; }

enum ConnectionType { Other = 0; Network = 1; Serial = 2; Sdi = 3; }

/* * * * * * * * * * * * * *
        PARAMETER
 * * * * * * * * * * * * * */

message DeviceParameterID {
  uint32 parameter = 1;
  uint32 device = 2;
}

message DeviceParameterIDs { repeated DeviceParameterID ids = 1; }

message Parameter {
  DeviceParameterID id = 1;
  ParameterError error = 2;
  repeated ParameterValue value = 3;
}
message Parameters { repeated Parameter parameters = 1; }

message ParameterValue {
  uint32 instanceID = 1;
  bool available = 2;      // Ignored in set request
  bool isAssumedState = 3; // Ignored in set request
  oneof value {
    int32 integer = 4;
    float floating = 5;
    uint32 currentOption = 6;
    string str = 7;
    Command cmd = 8;
    bool binary = 9;
    OptionList optionList = 10;
  }
}

message OptionList { repeated ParameterOption options = 1; }

message ModelParameterID {
  uint32 parameter = 1;
  uint32 model = 2; // if unspecified get default model with id 1!
}
message ModelParameterIDs { repeated ModelParameterID ids = 1; }

message ParameterDetail {
  ModelParameterID id = 1;
  string name = 2;
  uint32 instances = 3; // this can give parameters a second dimension of
                        // values, eg for channels of a frame syncroniser

  string label = 4;
  string shortLabel = 5;
  string description = 6;
  GenericType genericType = 7;
  bool isSpeedValue = 8; // Specifys if this parameter can be controled via a
                         // centering analog control like a joystick

  ControlStyle controlStyle = 9;
  FeedbackStyle feedbackStyle = 10;

  uint32 controlDelayMs = 11;    // minimum delay between sent commands
  uint32 quarantineDelayMs = 12; // time to wait after a set before sending new
                                 // values to the client subscribe stream

  uint32 retryCount =13; // how often to retry a set if target != current
  // optional config value for Normal and ControlledIncremental

  ValueType valueType = 14;

  DisplayStyle displayStyle = 15;
  float minimum = 16;         // optional, proto3 makes all values optional
  float maximum = 17;         // optional
  OptionList optionList = 18; // optional
  bool optionListIsDynamic = 19;
  // this is set to true when the optionlist can update during runtime
  ParameterValue defaultValue = 20;
}
message ParameterDetails { repeated ParameterDetail details = 1; }

message ParameterOption {
  uint32 id = 1;
  string name = 2;
}

enum Command { Trigger = 0; Increment = 1; Decrement = 2; }

enum ValueType {
  NoValue = 0; Integer = 1; Floating = 2; Opt = 3; String = 4; Binary = 5;
}

enum FeedbackStyle {
  UndefinedFeedback = 0; NormalFeedback = 1; DelayedFeedback = 2;
  NoFeedback = 3;
}

enum ControlStyle {
  Undefined = 0; Normal = 1;
  Incremental = 2; // Accept only Command::Increment and Command::Decrement
  NoControl = 3;   // Accept no control, display only
  Oneshot = 4;     // Accept only Command::Trigger
  ControlledIncremental = 5;
  // Simulate Normal by using Incremental under the hood
}

// DisplayStyle can set additional rendering details for the client display
enum DisplayStyle {
  DisplayDefault = 0; DisplayFLOAT_1DEZ = 1; DisplayFloat_2DEZ = 2;
  DisplayFloat_3DEZ = 3;
  DisplayPercent = 4;
  DisplayDb = 5;
  DisplayFstop = 6;
  DisplayFraction = 7;
  DisplayKelvin = 8;
}

enum GenericType {
  Generic = 0; ConnectionState = 1; DeviceIP = 2; Pan = 3; Tilt = 4; Tally = 5;
  Record = 6;
  Iris = 7;
}

enum ParameterError {
  NoError = 0; UnknownError = 1; UnknownID = 2; // implemented for get
  MinViolation = 3;                             // implemented
  MaxViolation = 4;                             // implemented
  InvalidType = 5;
  MaxRetrys = 6; // implemented
}
