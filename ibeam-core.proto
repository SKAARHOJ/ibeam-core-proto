/*
 * This Protofile describes the IBeam-Core Procotol.
 */
syntax = "proto3";
import "google/protobuf/descriptor.proto";
package ibeam_core;
option go_package = "../ibeam-core;ibeam_core";

/// This block hardcodes the ibeam version
option (ibeam_version) = "v0.3.14";
extend google.protobuf.FileOptions { string ibeam_version = 5000; }
/// End version block

service IbeamCore {
  // Returns all basic information about the Core.
  rpc GetCoreInfo(Empty) returns (CoreInfo);

  // Returns all information about the Device of the given DeviceID.
  // If you specify no ID, you get the DeviceInfos of all Devices.
  rpc GetDeviceInfo(DeviceIDs) returns (DeviceInfos);

  // Returns all information about the Model of the given ModelID.
  // If you specify no ID, you get the ModelInfos of all Models.
  rpc GetModelInfo(ModelIDs) returns (ModelInfos);

  // Returns all Parameters, with the specified DeviceParameterIDs.
  // This Parameters include the actual ParameterValue, which gives Information
  // about the availability and shows if the Parameter is assumed.
  // If you set no ParameterID, you get all Parameters for a given Device.
  rpc Get(DeviceParameterIDs) returns (Parameters);

  // Returns all ParameterDetails of the given ModelParameterID.
  // The Details include all basic information about a Parameter,
  // that descibe also how you cann controll the Parameter.
  // If you set no ParameterID, you get all Parameters for a given Model.
  rpc GetParameterDetails(ModelParameterIDs) returns (ParameterDetails);

  // With this funciton you can set a Value of a Parameter.
  // This function provides no Error. This will be send over the Subscribe
  // Stream.
  rpc Set(Parameters) returns (Empty);

  // No id -> subscribe to everything
  // On subscribe all current values should be sent back!
  rpc Subscribe(DeviceParameterIDs) returns (stream Parameter);

  // Config Handling

  // Get Current Configuration
  rpc GetCoreConfig(Empty) returns (ByteData);

  // Get the cores configuration schema generated
  rpc GetCoreConfigSchema(Empty) returns (ByteData);

  // Set the cores current configuration and write it to the config file
  rpc SetCoreConfig(ByteData) returns (Empty);

  // Restart the core (only works on unix based systems)
  rpc RestartCore(RestartInfo) returns (Empty);

  // Get Model Images
  rpc GetModelImages(ModelImageRequest) returns (ModelImages);
}

// The Empty message type for services that need or return no data
message Empty {}

/* * * * * * * * * * * * * *
        CORE
 * * * * * * * * * * * * * */

// The CoreInfo inclued tha basic Information about the IBeamCore
message CoreInfo {
  // Version of the IBeam Protocol
  string ibeamVersion = 1;
  // Version of the IBeam Core
  string coreVersion = 2;
  // @exclude In unisketch this should be a hard break that requires updating!
  // Flied for describing the Core
  string description = 3;
  // Name of the Core in the format core-...
  string name = 4;
  // Friendly name of the core for display everywhere
  string label = 11;
  // Number of Devices, that can be handled by the core
  uint32 maxDevices = 5;
  // Number of currently connected clients on the Core
  uint32 connectedClients = 6;
  // Type of connection. See ConnectionType enum
  ConnectionType connectionType = 7;
  // Primary category of the devices this core can control, used as metadata in
  // listings
  DeviceCategory deviceCategory = 8;
  // Additional categories for the core
  repeated DeviceCategory additionalDeviceCategorys = 12;
  // Flag set by the system to indicate the presence of Model Images
  bool hasModelImages = 9;
  // Used to indicate information about the development status of a core
  string developmentStatus = 10;
  // String indicating licensing information
  string licenseInformation = 13;
}

// The ConnectionType describes how the Core connects to the device
enum ConnectionType {
  Other = 0;
  Network = 1;
  Serial = 2;
  Sdi = 3;
}

// The DeviceCategory describes what type of device this core is connecting to
enum DeviceCategory {
  Undefined = 0;
  PTZCamera = 1;
  ClassicCamera = 2;
  VideoSwitcher = 3;
  VideoRouter = 4;
  AudioDevice = 5;
  LightDevice = 6;
  VideoProcessing = 7;
  MotionSystem = 8;
  TallySystem = 9;
  GenericProtocol = 10;
}

message ByteData { bytes data = 1; }

message RestartInfo {} // Might be used in the future

message ModelImageRequest {
  // ModelIDs to get images for
  ModelIDs models = 1;
  // Leave out the image data and just sent the MD5 hashes
  bool HashOnly = 2;
}

enum DiscoveryType {
  NoDiscovery = 0;
  MDNS = 1; // Default type is to use mdns discovery
  SSDP = 2; // Discover via upnp ssdp
}

message DiscoveryMethod {
  DiscoveryType DiscoverType = 1;
  int32 PortOverride = 2;  // Override the port that has been requested from the
                           // device with a different one
  string NameOverride = 6; // Devicename defaults to discovered hostname, this
                           // field can override this behavior

  // Provide the realm of discovery, for mdns this is the search scope
  string Realm = 3;
  // Provide a regex match for the text record of the MDNS discovery. If
  // hostname AND text are set both need to be true to match
  string TextRegex = 4;
  // provide a regex match for the hostname. If hostname AND text are set both
  // need to be true to match
  string HostnameRegex = 5;

  // Provide a regex of either the location or the Server header. If it matches
  // discovery will fetch more info and evaluate the response using
  // XMLDeviceRegex
  string SSDPServerRegex = 7;
  // See SSDPServerRegex
  string SSDPLocationRegex = 8;

  map<string, string> XMLDeviceRegex = 9;
}

message ModelImages {
  repeated ModelImage imgs = 1;
} // these are guaranteed to come back in the order of request data

message ModelImage {
  // ID of the model
  uint32 ModelID = 1;
  // actual image data, might be missing in case HashOnly is set to true in the
  // request
  bytes ImageData = 2;
  // MD5 Hash of the image
  string Hash = 3;
}

/* * * * * * * * * * * * * *
        DEVICE
 * * * * * * * * * * * * * */

message DeviceIDs { repeated uint32 ids = 1; }

// Deviceinfo is kept simple, connection status and device config is handeled
// via parameters
message DeviceInfo {
  uint32 deviceID = 1;
  uint32 modelID = 2;
}

message DeviceInfos { repeated DeviceInfo deviceInfos = 1; }

/* * * * * * * * * * * * * *
        MODEL
 * * * * * * * * * * * * * */

message ModelIDs { repeated uint32 ids = 1; }

// ModelInfo describes a model of the IBeamCore. It is used to describe
// different sets of Parameter fon different models
message ModelInfo {
  // ID of the model
  uint32 id = 1;
  // Name of the model
  string name = 2;
  // Description of the model
  string description = 3;

  // Describe how this model can be auto-discovered on a network
  DiscoveryMethod discovery = 4;

  // Used to indicate information about the development status of a model, uses
  // the same classes as for core-info
  string developmentStatus = 5;
  bool optimisticConnectionStatus = 6; // When set will never show "Connected/Unconnected" but rather "Ready"
         // in Reactor. Core should still set the connectionstatus of the
         // devices to true

  repeated DeviceCategory deviceCategorys = 12;
  string DeviceWebUILink = 13; // provide a link template to the devices webui. use {ip} to add the ip address into it. use {port} or {:port} to add a port if available, optionally with a : . If defined it will render a new button to open the UI
  // String indicating licensing information
  string licenseInformation = 14;
}
message ModelInfos { repeated ModelInfo modelInfos = 1; }

/* * * * * * * * * * * * * *
        PARAMETER
 * * * * * * * * * * * * * */

message DeviceParameterID {
  uint32 parameter = 1;
  uint32 device = 2;
}

message DeviceParameterIDs { repeated DeviceParameterID ids = 1; }

message Parameter {
  DeviceParameterID id = 1;
  ParameterError error = 2;
  repeated ParameterValue value = 3;
}
message Parameters { repeated Parameter parameters = 1; }

message ParameterValue {
  repeated uint32 dimensionID = 1;
  // Shows if the Parameter is currently available. This field is ignored in set
  // request
  bool available = 2;
  // Shows if the Parameter is currently assumed. This field is ignored in set
  // request.
  bool isAssumedState = 3;

  // This boolean should be set by the server if the value is eitehr not yet
  // known, or known to be garbage from the implementation. It should signal to
  // the client to replace the value with a placeholder
  bool invalid = 21;
  // The Value for the Parameter.
  oneof value {
    int32 integer = 4;
    int32 incDecSteps = 5; // Could change concept here...
    double floating = 6;
    string str = 7;
    uint32 currentOption = 8;
    Command cmd = 9;
    bool binary = 10;
    OptionList optionListUpdate = 11; // Used to update an optionlist
    double minimumUpdate = 12;        // used to update a minimum value
    double maximumUpdate = 13;        // used to update a maximum value
    bytes png = 14;
    bytes jpeg = 15;
    CustomError error = 16;
  }

  map<string, ParameterMetaValue> metaValues = 20;
}

message CustomError {
  string ID =
      1; // The ID string allows everybody down the chain to understand if this
         // is a repeating error and can be merged to one existing one
  string Message = 2;
  CustomErrorType errortype = 3;
  // bool HideInUI = 2; // not yet sure if needed, maybe also "show in ui ?"
}

enum CustomErrorType {
  Error = 0;
  Resolve = 1;
  Warning = 2;
}

message OptionList { repeated ParameterOption options = 1; }

message ModelParameterID {
  uint32 parameter = 1;
  uint32 model = 2; // if unspecified get default model with id 1!
}
message ModelParameterIDs { repeated ModelParameterID ids = 1; }

message ParameterDetail {
  // Parameter IDs should be unique (per model) and will break compatibility if
  // changed between versions
  ModelParameterID id = 1;

  // Codesave name of the parameter
  string name = 2;

  // Path describes a grouping of the parameter to the client. Groups need to be
  // seperated by a / and can contain spaces This should also end with a / and
  // not contain the parameter name or label again
  string path = 24;

  // give parameters multiple dimensions values, eg for channels of a frame
  // syncroniser or MEs / Keys in a switcher
  repeated DimensionDetail dimensions = 3;

  // The parameter label for the client
  string label = 4;
  string shortLabel = 5;
  string description = 6;

  // Note if the parameter is in experimantal state currently, decription should
  // point out more details
  bool IsExperimental = 37;

  GenericType genericType = 7;

  // Specifies if this parameter can be controled via a centering analog control
  // like a joystick
  bool isSpeedValue = 8;

  ControlStyle controlStyle = 9;
  FeedbackStyle feedbackStyle = 10;

  // time to wait between sending commands to the device
  uint32 controlDelayMs = 11;

  // time to wait after a set before sending new values to the client subscribe
  // stream
  uint32 quarantineDelayMs = 12;

  // how often to retry a set if target != current config value for Normal
  // Control Style
  uint32 retryCount = 13;

  // The actual type of the value
  ValueType valueType = 14;

  string displayPrefix = 27;
  string displaySuffix = 28;
  FloatPrecision displayFloatPrecision = 29;

  // Input curve allows the  core to specify what style of input value range
  // function is appropriate for this parameter, eg focus or audio might need
  // logarithmic style curves

  reserved 30; // blocked for legacy reasons (InputCurve)
  // Parameter determining an input curve (>0, 0, 0.5 or 1 and >1 are invalid
  // values and will disable the feature) This adds a curve to the input sliders
  // for this parameter, think of it like a "logarithmic potentiometer". Usefull
  // as a simple fix for audio or focus parameters More info here:
  // https://electronics.stackexchange.com/questions/304692/formula-for-logarithmic-audio-taper-pot
  float inputCurveExpo = 34;

  // Specify a value threshold for when the manager marks the parameter as set
  // correctly, useful for cases where the device will respond with a slightly
  // different value then requested
  double acceptanceThreshold = 35;

  // Extended value info provides a way of adding further values to a integer or
  // float value type it also allows to specify labels for certain values like
  // "Close", "Far", "Near". Do NOT use this for indicating unavailable or
  // invalid values! use the corresponding flags instead
  repeated DescreteValueDetail descreteValueDetails = 31;

  // Maximum Value for Integers and Floats
  double minimum = 16;
  // Minimum Value for Integers and Floats
  double maximum = 17;

  // Fine steps allow the devicecore to recommend a fine step value for Integers
  // and Floats
  double fineSteps = 32;
  // Fine steps allow the devicecore to recommend a corse step value for
  // Integers and Floats
  double coarseSteps = 33;

  // Option List including the starting options
  OptionList optionList = 18;

  // This is set to true when the optionlist can update during runtime
  bool optionListIsDynamic = 19;
  // This is set to true when the minimmum and maximum can update during runtime
  bool minMaxIsDynamic = 26;

  // Default value for a parameter
  ParameterValue defaultValue = 20;

  // Map with Parameter meta values, added values that might need to be used for
  // any additional info that does not require the devicecore to hold more state
  map<string, ParameterMetaDetail> metaDetails = 21;
  // Maximum Value for Incrementation
  int32 incDecStepsUpperLimit = 22;
  // Maximum Negative Value for Decrementation
  int32 incDecStepsLowerLimit = 23;

  // Specifies if a parameter can still be controlled while connection state is
  // false, only comes into affect if connectionstate exists in the devicecore
  bool controllableWhileDisconnected = 25;

  // Give thge client a hint what user level this parameter covers (this is
  // purely metadata)
  ParameterUIType UIType = 38;

  // Give the client a hint if this parameter should be paired with another one
  // for display and purposes
  string RecommendedParamForTextDisplay = 39;
  string RecommendedParamForTitleDisplay = 41;

  int32 UIListingOrder = 40;
}

message ParameterDetails { repeated ParameterDetail details = 1; }

message DimensionDetail {
  string name = 1;
  uint32 count = 2;
  string description = 3;
  // if we need to name dimensions elementLabels can be used. Caution: this is
  // not supposed for parameters like RGB or combinations of different values.
  // It is rather used to indicate labeling in values like different
  // audiochannels (eg channel 9 and 10 are refered to as MasterLeft /
  // MasterRight) Think of it this way: if the user could still understand the
  // parameter without the label it is ok to use it to improve the user
  // experience
  map<uint32, string> elementLabels = 4;
}

message ParameterMetaValue {
  oneof value {
    int32 integer = 1;
    bool binary = 2;
    string str = 3;
    double floating = 4;
  }
}

enum ParameterMetaType {
  MetaInteger = 0;
  MetaBinary = 1;
  MetaStr = 2;
  MetaFloating = 3;
  MetaOption = 4;
}

message ParameterMetaDetail {
  ParameterMetaType metaType = 1;
  double Minimum = 2;
  double Maximum = 3;
  repeated string options = 4;

  bool required = 5;
  string description = 6;
}

message ParameterOption {
  uint32 id = 1;
  string name = 2;
  string shortName = 3;
}

message DescreteValueDetail {
  // The actual value that is supposed to be replaced
  double value = 1;

  // The actual label for this value or valuerange
  string name = 2;
}

enum Command {
  Trigger = 0;
}

enum ValueType {
  NoValue = 0;
  Integer = 1;
  Floating = 2;
  Opt = 3;
  String = 4;
  Binary = 5;
  PNG = 6;
  JPEG = 7;
}

enum FeedbackStyle {
  UndefinedFeedbackStyle = 0;
  NormalFeedback = 1;
  DelayedFeedback = 2;
  NoFeedback = 3;
}

enum ControlStyle {
  UndefinedControlStyle = 0;
  // Normal control, by setting a Value
  Normal = 1;
  // Use Increment and Decrement by sending positiv or negative Values
  Incremental = 2;
  // Accept no control, display only
  NoControl = 3;
  // Accept only Command::Trigger
  Oneshot = 4;

  reserved 5; // reserved for legacy, removed controlled incremental here
}

enum FloatPrecision {
  UndefinedFloatPrecision = 0;
  OneDecimal = 1;
  TwoDecimals = 2;
  ThreeDecimals = 3;
  FourDecimals = 4;
}

// Some generic types for common parameter
enum GenericType {
  Generic = 0;
  ConnectionState = 1;
  DeviceIP = 2;
  Pan = 3;  // if this and zoom will add invert conditions
  Tilt = 4; // if this and zoom will add invert conditions

  Focus = 11; // if this and zoom will add invert conditions
  Zoom = 12;  // if this and zoom will add invert conditions

  Tally = 5;
  Record = 6;
  Iris = 7;

  TestTrigger = 8;

  SettableValue = 9; // for alternative label and stuff for setValue first, then
                     // add a step change
  SimpleConfirm = 10;

  PresetRecall = 13;
  PresetStore = 14;
  PresetExist = 15;
  PresetDelete = 16;

  PresetThumbnail = 17;
  PresetThumbnailExists = 18;
}

// Errortypes when setting a Parameter
enum ParameterError {
  NoError = 0;
  UnknownError = 1;
  UnknownID = 2;
  MinViolation = 3;
  MaxViolation = 4;
  InvalidType = 5;
  MaxRetrys = 6;
  StepSizeViolation = 7;
  // Will be returned if Value for Parameter with NoValue was set
  HasNoValue = 8;
  Unavailable = 9;
  Custom = 10; // A way to describe that the message holds a custom error type
}

enum ParameterUIType {
  NormalParameter = 0; // selectable in ioref parameter dropdown always
  SimpleParameter = 1; // also show this as autogenerated oneclick behavior
  HelperParameter = 2; // will be hidden in ioref parameter dropdown unless "all
                       // parameters" flag is ticked
}
