syntax = "proto3";

// IBeam-Core protocol version 0.1.0

package ibeam_core;
option go_package = ".;ibeam_core";

service IbeamCore {
  /* Return the Core and it's Infos that inclues:
   * - Ibeam Version Numbe
   * - Core Version Number
   * - Product Name
   * - Max Devices
   * - Connected Clients
   */
  rpc GetCoreInfo(Empty) returns (CoreInfo);

  // No id -> get everything
  rpc GetDeviceInfo(DeviceIDs) returns (DeviceInfos);

  //---------------------

  // No id -> get everything, as ParamID has 2 dimensions this rule should work
  // in both
  rpc Get(ParameterIDs) returns (Parameters);
  rpc GetParameterDetails(ModelParameterIDs) returns (ParameterDetails);

  rpc Set(Parameters) returns (Empty); // on error: return via stream

  // No id -> subscribe to everything
  // On subscribe all current values should be sent back!
  rpc Subscribe(Parameter) returns (stream Parameter);
}

message Empty {}

/* * * * * * * * * * * * * *
        CORE
 * * * * * * * * * * * * * */

message CoreInfo {
  string ibeamVersion = 1; // Implemented version of the IBeam Protocol (better
                           // String than int for Versions like 1.0.2b)
  string coreVersion = 2;  // Implemented version of the IBeam Core
  // In unisketch this should be a hard break that requires updating!
  string description = 3;
  string productName = 4;
  uint32 maxDevices = 5;
  uint32 connectedClients = 6;
}

/* * * * * * * * * * * * * *
        DEVICE
 * * * * * * * * * * * * * */

message DeviceID { uint32 deviceID = 1; }
message DeviceIDs { repeated DeviceID deviceIDs = 1; }

message DeviceInfo {
  DeviceID deviceID = 1;
  ModelID modelID = 2;
  bool connected = 3;
  ConnectionType connectionType = 4;
  string name = 5;
}
message DeviceInfos { repeated DeviceInfo deviceInfos = 1; }

enum ConnectionType {
  Other = 0;
  Network = 1;
  Serial = 2;
  Sdi = 3;
}

/* * * * * * * * * * * * * *
        MODEL
 * * * * * * * * * * * * * */

message ModelID { uint32 modelID = 1; }
message ModelIDs { repeated ModelID modelIDs = 1; }

message ModelInfo {
  ModelID modelID = 1;
  string name = 2;
  string description = 3;
}
message ModelInfos { repeated ModelInfo modelInfos = 1; }

/* * * * * * * * * * * * * *
        PARAMETER
 * * * * * * * * * * * * * */

message ParameterID {
  uint32 parameterID = 1;
  uint32 deviceID = 2;
  uint32 modelID = 3; // if unspecified get default model!
}

message ParameterIDs { repeated ParameterID parameterID = 1; }

message Parameter {
  ParameterID parameterID = 1;
  ParameterError error = 2;
  repeated ParameterValue value = 3;
}
message Parameters { repeated Parameter parameters = 1; }

message ParameterValue {
  uint32 instanceID = 1;
  bool available = 2;      // Ignored in set request
  bool isAssumedState = 3; // Ignored in set request
  oneof value {
    int32 integer = 4;
    float floating = 5;
    uint32 currentOption = 6;
    string str = 7;
    Command cmd = 8;
  }
}

message ModelParameterID {
  uint32 parameterID = 1;
  uint32 modelID = 2; // if unspecified get default model!
}
message ModelParameterIDs {
  repeated ParameterID modelParameterIDs = 1;
} // TODO: Shall we use short form here ?

message ParameterDetail {
  ModelParameterID id = 1;
  string name = 2;
  uint32 instances = 3; // this can give parameters a second dimension of
                        // values, eg for channels of a frame syncroniser
  GenericType genericType = 4;
  ControlStyle controlStyle = 5;
  uint32 feedbackDelayMs = 6; // 0 means no feedback
  // We might need a control pulses limiting thing here as well...
  ValueType valueType = 7;

  string label = 8;
  string shortLabel = 9;
  string description = 10;
  DisplayStyle displayStyle = 11;

  float minimum = 12; // optional, proto3 makes all values optional
  float maximum = 13; // optional
  repeated ParameterOption optionList = 14; // optional
}
message ParameterDetails { repeated ParameterDetail parameterDetails = 1; }

message ParameterOption {
  uint32 id = 1;
  string name = 2;
}

enum Command {
  Idle = 0;
  Increment = 1;
  Decrement = 2;
}

enum ValueType {
  Undefined = 0;
  Integer = 1;
  Floating = 2;
  Opt = 3;
  String = 4;
}

enum ControlStyle {
  UndefinedControl = 0;
  Normal = 1;
  Incremental = 2;
  NoControl = 3;
  Oneshot = 4; // TODO: do we need this ?
}

// TODO: this is stolen from the retvalformat array, it should be reevaluated
enum DisplayStyle {
  DisplayDefault = 0;
  DisplayFLOAT_1DEZ = 12;
  DisplayFloat_2DEZ = 1;
  DisplayFloat_3DEZ = 8;
  DisplayFLOAT_5 = 9; // TODO: What is this ?!
  DisplayPercent = 2;
  DisplayDb = 3;
  DisplayFstop = 4;
  DisplayFraction = 5;
  DisplayKelvin = 6;
}

enum GenericType {
  Generic = 0;
  DeviceIP = 1;
  Pan = 2;
  Tilt = 3;
  Tally = 4;
  Record = 5;
  Iris = 6;
}

enum ParameterError {
  NoError = 0;
  UnknownError = 1;
  UnknownID = 2;
  SetParamFailed = 3;
}

// Current TODO
/*
- [x] Parameters need some way of signaling RETVAL_Format style rendering info,
some of which could also be default behaviour
- [ ] What about speed values ?
- [x] Add Error Handling
- [x] The device abstraction feels odd currently... we should improve that
- [x] The concept of parameter arguments needs some decent reevaluation!
*/
