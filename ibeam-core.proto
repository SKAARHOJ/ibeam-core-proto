syntax = "proto3";

// IBeam-Core protocol version 0.1.0

package ibeam_core;
option go_package = ".;ibeam_core";

service IbeamCore {
  /* Return the Core and it's Infos that inclues:
   * - Ibeam Version Numbe
   * - Core Version Number
   * - Product Name
   * - Max Devices
   * - Connected Clients
   */
  rpc GetCoreInfo(Empty) returns (CoreInfo);

  // No id -> get everything
  rpc GetDeviceInfo(DeviceIDs) returns (DeviceInfos);
  rpc GetModelInfo(ModelIDs) returns (ModelInfos);

  //---------------------

  // No id -> get everything, as ParamID has 2 dimensions this rule should work
  // in both
  rpc Get(DeviceParameterIDs) returns (Parameters);
  rpc GetParameterDetails(ModelParameterIDs) returns (ParameterDetails);

  rpc Set(Parameters) returns (Empty); // on error: return via stream

  // No id -> subscribe to everything
  // On subscribe all current values should be sent back!
  rpc Subscribe(DeviceParameterIDs) returns (stream Parameter);
}

message Empty {}

/* * * * * * * * * * * * * *
        CORE
 * * * * * * * * * * * * * */

message CoreInfo {
  string ibeamVersion = 1; // Implemented version of the IBeam Protocol (better
  // String than int for Versions like 1.0.2b)
  string coreVersion = 2; // Implemented version of the IBeam Core
  // In unisketch this should be a hard break that requires updating!
  string description = 3;
  string productName = 4;
  uint32 maxDevices = 5;
  uint32 connectedClients = 6;
}

/* * * * * * * * * * * * * *
        DEVICE
 * * * * * * * * * * * * * */

message DeviceIDs { repeated uint32 ids = 1; }

// Deviceinfo is kept simple, connection status and device config is handeled
// via parameters
message DeviceInfo {
  uint32 deviceID = 1;
  uint32 modelID = 2;
  // string name = 3; // TODO: this could be removed I guess... but not so sure
}
message DeviceInfos { repeated DeviceInfo deviceInfos = 1; }

/* * * * * * * * * * * * * *
        MODEL
 * * * * * * * * * * * * * */

message ModelIDs { repeated uint32 ids = 1; }

message ModelInfo {
  uint32 id = 1;
  string name = 2;
  string description = 3;
  ConnectionType connectionType = 4;
}
message ModelInfos { repeated ModelInfo modelInfos = 1; }

enum ConnectionType {
  Other = 0;
  Network = 1;
  Serial = 2;
  Sdi = 3;
}

/* * * * * * * * * * * * * *
        PARAMETER
 * * * * * * * * * * * * * */

message DeviceParameterID {
  uint32 parameter = 1;
  uint32 device = 2;
}

message DeviceParameterIDs { repeated DeviceParameterID ids = 1; }

message Parameter {
  DeviceParameterID id = 1;
  ParameterError error = 2;
  repeated ParameterValue value = 3;
}
message Parameters { repeated Parameter parameters = 1; }

message ParameterValue {
  uint32 instanceID = 1;   // instance id
  bool available = 2;      // Ignored in set request
  bool isAssumedState = 3; // Ignored in set request
  oneof value {
    int32 integer = 4;
    float floating = 5;
    uint32 currentOption = 6;
    string str = 7;
    Command cmd = 8;
    bool binary = 9;
    OptionList optionList = 10;
  }
}

message OptionList { repeated ParameterOption list = 1; }

message ModelParameterID {
  uint32 parameter = 1;
  uint32 model = 2; // if unspecified get default model!
}
message ModelParameterIDs { repeated ModelParameterID ids = 1; }

message ParameterDetail {
  ModelParameterID id = 1;
  string name = 2;
  uint32 instances = 3; // this can give parameters a second dimension of
                        // values, eg for channels of a frame syncroniser
  GenericType genericType = 4;
  ControlStyle controlStyle = 5;

  uint32 feedbackDelayMs = 6;   // 0 means no feedback
  uint32 quarantineDelayMs = 7; // how long to wait before accepting new values
                                // from the camera after a change from the core
  // TODO: We might need a control pulses limiting thing here as well...
  // TODO: when assuming state, how long do we want to do it for before falling
  // back ? can this be couppeled with quarantine delay ?

  ValueType valueType = 8;

  string label = 9;
  string shortLabel = 10;
  string description = 11;
  DisplayStyle displayStyle = 12;

  float minimum = 13;         // optional, proto3 makes all values optional
  float maximum = 14;         // optional
  OptionList optionList = 15; // optional
  bool optionListIsDynamic = 16;
  // this is set to true when the optionlist can update during runtime
}
message ParameterDetails { repeated ParameterDetail details = 1; }

message ParameterOption {
  uint32 id = 1;
  string name = 2;
}

enum Command {
  Trigger = 0;
  Increment = 1;
  Decrement = 2;
}

enum ValueType {
  NoValue = 0;
  Integer = 1;
  Floating = 2;
  Opt = 3;
  String = 4;
  Binary = 5;
}

enum ControlStyle {
  UndefinedControl = 0;
  Normal = 1;
  Incremental = 2;
  NoControl = 3;
  Oneshot = 4;
}

// TODO: this is stolen from the retvalformat array, it should be reevaluated
enum DisplayStyle {
  DisplayDefault = 0;
  DisplayFLOAT_1DEZ = 12;
  DisplayFloat_2DEZ = 1;
  DisplayFloat_3DEZ = 8;
  DisplayFLOAT_5 = 9; // TODO: What is this ?!
  DisplayPercent = 2;
  DisplayDb = 3;
  DisplayFstop = 4;
  DisplayFraction = 5;
  DisplayKelvin = 6;
}

enum GenericType {
  Generic = 0;
  ConnectionState = 1;
  DeviceIP = 2;
  Pan = 3;
  Tilt = 4;
  Tally = 5;
  Record = 6;
  Iris = 7;
}

enum ParameterError {
  NoError = 0;
  UnknownError = 1;
  UnknownID = 2;
  SetParamFailed = 3;
}

// Current TODO
/*
- [x] Parameters need some way of signaling RETVAL_Format style rendering info,
some of which could also be default behaviour
- [ ] What about speed values ?
- [x] Add Error Handling
- [x] The device abstraction feels odd currently... we should improve that
- [x] The concept of parameter arguments needs some decent reevaluation!
*/
