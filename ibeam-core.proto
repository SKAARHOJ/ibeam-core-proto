/*
 * This Protofile describes the IBeam-Core Procotol.
 */
syntax = "proto3";
import "google/protobuf/descriptor.proto";
package ibeam_core;
option go_package = ".;ibeam_core";

/// This block hardcodes the ibeam version
option(ibeam_version) = "0.1.2";
extend google.protobuf.FileOptions { string ibeam_version = 5000; }
/// End version block

service IbeamCore {
  // Returns all basic information about the Core.
  rpc GetCoreInfo(Empty) returns(CoreInfo);

  // Returns all information about the Device of the given DeviceID.
  // If you specify no ID, you get the DeviceInfos of all Devices.
  rpc GetDeviceInfo(DeviceIDs) returns(DeviceInfos);

  // Returns all information about the Model of the given ModelID.
  // If you specify no ID, you get the ModelInfos of all Models.
  rpc GetModelInfo(ModelIDs) returns(ModelInfos);

  // Returns all Parameters, with the specified DeviceParameterIDs.
  // This Parameters include the actual ParameterValue, which gives Information
  // about the availability and shows if the Parameter is assumed.
  // If you set no ParameterID, you get all Parameters for a given Device.
  rpc Get(DeviceParameterIDs) returns(Parameters);

  // Returns all ParameterDetails of the given ModelParameterID.
  // The Details include all basic information about a Parameter,
  // that descibe also how you cann controll the Parameter.
  // If you set no ParameterID, you get all Parameters for a given Model.
  rpc GetParameterDetails(ModelParameterIDs) returns(ParameterDetails);

  // With this funciton you can set a Value of a Parameter.
  // This function provides no Error. This will be send over the Subscribe
  // Stream.
  rpc Set(Parameters) returns(Empty);

  // No id -> subscribe to everything
  // On subscribe all current values should be sent back!
  rpc Subscribe(DeviceParameterIDs) returns(stream Parameter);
}

// The Empty message type for services that need or return no data
message Empty {}

/* * * * * * * * * * * * * *
        CORE
 * * * * * * * * * * * * * */

// The CoreInfo inclued tha basic Information about the IBeamCore
message CoreInfo {
  // Version of the IBeam Protocol
  string ibeamVersion = 1;
  // Version of the IBeam Core
  string coreVersion = 2;
  // @exclude In unisketch this should be a hard break that requires updating!
  // Flied for describing the Core
  string description = 3;
  // Name of the Core
  string name = 4;
  // Number of Devices, that can be handled by the core
  uint32 maxDevices = 5;
  // Number of clients that can connect to the Core
  uint32 connectedClients = 6;
}

/* * * * * * * * * * * * * *
        DEVICE
 * * * * * * * * * * * * * */

message DeviceIDs { repeated uint32 ids = 1; }

// Deviceinfo is kept simple, connection status and device config is handeled
// via parameters
message DeviceInfo {
  uint32 deviceID = 1;
  uint32 modelID = 2;
}

message DeviceInfos { repeated DeviceInfo deviceInfos = 1; }

/* * * * * * * * * * * * * *
        MODEL
 * * * * * * * * * * * * * */

message ModelIDs { repeated uint32 ids = 1; }

// ModelInfo describes a model of the IBeamCore. It is used to describe
// different sets of Parameter fon different models
message ModelInfo {
  // ID of the model
  uint32 id = 1;
  // Name of the model
  string name = 2;
  // Description of the model
  string description = 3;
  // Thype of connection. See ConnectionType enum
  ConnectionType connectionType = 4;
}
message ModelInfos { repeated ModelInfo modelInfos = 1; }

// The ConnectionType describes how the Core connects to the device
enum ConnectionType { Other = 0; Network = 1; Serial = 2; Sdi = 3; }

/* * * * * * * * * * * * * *
        PARAMETER
 * * * * * * * * * * * * * */

message DeviceParameterID {
  uint32 parameter = 1;
  uint32 device = 2;
}

message DeviceParameterIDs { repeated DeviceParameterID ids = 1; }

message Parameter {
  DeviceParameterID id = 1;
  ParameterError error = 2;
  repeated ParameterValue value = 3;
}
message Parameters { repeated Parameter parameters = 1; }

message ParameterValue {
  uint32 instanceID = 1;
  // Shows if the Parameter is currently available.
  // This field is ignored in set request
  bool available = 2;
  // Shows if the Parameter is currently assumed.
  // This field is ignored in set request.
  bool isAssumedState = 3;
  // The Value for the Parameter.
  oneof value {
    int32 integer = 4;
    int32 incDecSteps = 5; // Could change concept here...
    float floating = 6;
    string str = 7;
    uint32 currentOption = 8;
    Command cmd = 9;
    bool binary = 10;
    OptionList optionList = 11;
  }
  repeated ParameterMetaValue metaValues = 20;
}

message OptionList { repeated ParameterOption options = 1; }

message ModelParameterID {
  uint32 parameter = 1;
  uint32 model = 2; // if unspecified get default model with id 1!
}
message ModelParameterIDs { repeated ModelParameterID ids = 1; }

message ParameterDetail {
  ModelParameterID id = 1;
  string name = 2;
  // this can give parameters a second dimension of
  // values, eg for channels of a frame syncroniser
  uint32 instances = 3;

  string label = 4;
  string shortLabel = 5;
  string description = 6;
  GenericType genericType = 7;
  // Specifys if this parameter can be controled via a
  // centering analog control like a joystick
  bool isSpeedValue = 8;

  ControlStyle controlStyle = 9;
  FeedbackStyle feedbackStyle = 10;
  // minimum delay between sent commands
  uint32 controlDelayMs = 11;
  // time to wait after a set before sending new
  // values to the client subscribe stream
  uint32 quarantineDelayMs = 12;

  // how often to retry a set if target != current
  // optional config value for Normal and ControlledIncremental
  uint32 retryCount = 13;

  ValueType valueType = 14;

  DisplayStyle displayStyle = 15;
  float minimum = 16;         // optional, proto3 makes all values optional
  float maximum = 17;         // optional
  OptionList optionList = 18; // optional
  bool optionListIsDynamic = 19;
  // this is set to true when the optionlist can update during runtime
  ParameterValue defaultValue = 20;

  repeated ParameterMetaDescription metaDescription = 21;
  // Maximum Value for Incrementation
  int32 incDecStepsUpperRange = 22;
  // Maximum Negative Value for Decrementation
  int32 incDecStepsLowerRange = 23;
}

message ParameterDetails { repeated ParameterDetail details = 1; }

message ParameterMetaValue {
  string key = 1;
  oneof value {
    int32 integer = 2;
    bool binary = 3;
    string str = 4;
    float floating = 5;
  }
}

message ParameterMetaDescription {
  string key = 1; // In case of meta the key is the id
  ParameterMetaType metaType = 2;
}

enum ParameterMetaType {
  MetaInteger = 0; MetaBinary = 1; MetaStr = 2; MetaFloating = 3;
}

message ParameterOption {
  uint32 id = 1;
  string name = 2;
}

enum Command { Trigger = 0; Increment = 1; Decrement = 2; }

enum ValueType {
  NoValue = 0; Integer = 1; Floating = 2; Opt = 3; String = 4; Binary = 5;
}

enum FeedbackStyle {
  UndefinedFeedback = 0; NormalFeedback = 1; DelayedFeedback = 2;
  NoFeedback = 3;
}

enum ControlStyle {
  Undefined = 0;
  // Normal control, by setting a Value
  Normal = 1;
  // Accept only Command::Increment and Command::Decrement
  Incremental = 2;
  // Accept no control, display only
  NoControl = 3;
  // Accept only Command::Trigger
  Oneshot = 4;
  // Simulate Normal by using Incremental under the hood
  ControlledIncremental = 5;
  // Use Increment and Decrement by sending positiv or negative Values
  IncrementalWithSteps = 6;
}

// DisplayStyle can set additional rendering details for the display
enum DisplayStyle {
  // Value will be displayed like it is
  DisplayDefault = 0;
  // Value will be displayed with one decimal place (f.e. 32.7)
  DisplayFLOAT_1DEZ = 1;
  // Value will be displayed with two decimal places (f.e. 32.78)
  DisplayFloat_2DEZ = 2;
  // Value will be displayed with three decimal places (f.e. 32.789)
  DisplayFloat_3DEZ = 3;
  // Value will be displayed with an appended '%' sign
  DisplayPercent = 4;
  // Value will be displayed with an appended 'db' sign
  DisplayDb = 5;
  // Value will be displayed with an appended 'f' sign
  DisplayFstop = 6;
  // Value will be displayed as unit fraction (f.e. 32 will be shown as 1/32)
  DisplayFraction = 7;
  // Value will be displayed with an appended 'K' sign
  DisplayKelvin = 8;
}

// Some generic types for common parameter
enum GenericType {
  Generic = 0; ConnectionState = 1; DeviceIP = 2; Pan = 3; Tilt = 4; Tally = 5;
  Record = 6;
  Iris = 7;
}

// Errortypes when setting a Parameter
enum ParameterError {
  NoError = 0; UnknownError = 1; UnknownID = 2; MinViolation = 3;
  MaxViolation = 4;
  InvalidType = 5;
  MaxRetrys = 6;
  RangeViolation = 7;
}
