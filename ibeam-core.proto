syntax = "proto3";

package ibeam_core;
option go_package = ".;ibeam_core";

service IbeamCore {
  rpc GetCoreInfo(Empty) returns (CoreInfo);
  // No id -> get everything
  rpc GetDeviceInfo(DeviceIds) returns (DeviceInfos);

  //---------------------

  // No id -> get everything, as ParamID has 2 dimensions this rule should work
  // in both
  rpc Get(DeviceParameterIds) returns (Parameters);
  rpc GetParameterDetails(ParameterIds) returns (ParameterDetails);

  rpc Set(Parameters) returns (Empty); // Or Parameters ?

  // No id -> subscribe to everything
  // On subscribe all current values should be sent back!
  rpc Subscribe(DeviceParameterIds) returns (stream Parameter);
}


message Empty {
}


message CoreInfo {
  int32 ibeamVersion = 1; // Implemented version of the IBeam Protocol
  int32 coreVersion = 2;
  // In unisketch this should be a hard break that requires updating!
  string productName = 3;
  uint32 maxDevices = 4;
  uint32 connectedClients = 6;
}

message DeviceIds { uint32 deviceId = 1; }

message DeviceInfos { repeated DeviceInfo info = 1; }

message DeviceInfo {
  uint32 id = 1;
  bool connected = 2;
  string name = 3;
  ConnectionType connectionType = 4;
}

message DeviceParameterIds { repeated DeviceParameterId id = 1; }
message ParameterIds { repeated uint32 id = 1; }
message ParameterDetails { repeated ParameterDetail details = 1; }

message DeviceParameterId {
  // Keep in mind that 0 -> absent in protobuf,
  // so DO NOT map params or devices to id 0
  uint32 parameter = 1;
  uint32 device = 2;
}

message ParameterOption {
  uint32 id = 1;
  string name = 2;
}

message Parameters { repeated Parameter parameters = 1; }
message Parameter {
  DeviceParameterId id = 1;
  repeated ParameterValue value = 2;
}

message ParameterValue {
  uint32 instanceId = 1;
  bool available = 2;
  bool isAssumedState = 3;
  oneof value {
    int32 int = 4;
    float floating = 5;
    uint32 currentOption = 6;
    string str = 7;
  }
}

message ParameterDetail {
  uint32 id = 1;
  string name = 2;
  uint32 instances = 3; // this can give parameters a second dimension of
                        // values, eg for channels of a frame syncroniser
  GenericType genericType = 4;
  ControlStyle controlStyle = 5;
  FeedbackStyle feedbackStyle = 6;
  ValueType valueType = 7;

  string label = 8;
  string shortLabel = 9;
  string description = 10;
  DisplayStyle displayStyle = 11;

  float minimum = 12; // optional, proto3 makes all values optional
  float maximum = 13; // optional
  repeated ParameterOption optionList = 14; // optional
}

enum ValueType {
  Undefined = 0;
  Int = 1;
  Floating = 2;
  Opt = 3;
  String = 4;
}

enum ControlStyle {
  UndefinedControl = 0;
  FullControl = 1;
  Up_down = 2;
  NoControl = 3;
  Oneshot = 4;
}

enum FeedbackStyle {
  UndefinedFeedback = 0;
  FullFeedback = 1;
  Delayed = 2;
  NoFeedback = 3;
}

// TODO: this is stolen from the retvalformat array, it should be reevaluated
enum DisplayStyle {
  DisplayDefault = 0;
  DisplayFLOAT_1DEZ = 12;
  DisplayFloat_2DEZ = 1;
  DisplayFloat_3DEZ = 8;
  DisplayFLOAT_5 = 9; // TODO: What is this ?!
  DisplayPercent = 2;
  DisplayDb = 3;
  DisplayFstop = 4;
  DisplayFraction = 5;
  DisplayKelvin = 6;
}

enum GenericType {
  Generic = 0;
  DeviceIP = 1;
  Pan = 2;
  Tilt = 3;
  Tally = 4;
  Record = 5;
  Iris = 6;
}

enum ConnectionType {
  Other = 0;
  Network = 1;
  Serial = 2;
  Sdi = 3;
}

// Current TODO
/*
- [ ] Parameters need some way of signaling RETVAL_Format style rendering info,
some of which could also be default behaviour
- [ ] What about speed values ?
- [x] The device abstraction feels odd currently... we should improve that
- [x] The concept of parameter arguments needs some decent reevaluation!
*/
